/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/model.glb 
*/

import { useAnimations, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { button, useControls } from "leva";
import React, { useEffect, useRef, useState } from "react";

import * as THREE from "three";
import { useChat } from "../hooks/useChat";

const facialExpressions = {
  default: {},
  smile: {
    browInnerUp: 0.17,
    eyeSquintLeft: 0.4,
    eyeSquintRight: 0.44,
    noseSneerLeft: 0.1700000727403593,
    noseSneerRight: 0.14000002836874015,
    mouthPressLeft: 0.61,
    mouthPressRight: 0.41000000000000003,
  },
  funnyFace: {
    jawLeft: 0.63,
    mouthPucker: 0.53,
    noseSneerLeft: 1,
    noseSneerRight: 0.39,
    mouthLeft: 1,
    eyeLookUpLeft: 1,
    eyeLookUpRight: 1,
    cheekPuff: 0.9999924982764238,
    mouthDimpleLeft: 0.414743888682652,
    mouthRollLower: 0.32,
    mouthSmileLeft: 0.35499733688813034,
    mouthSmileRight: 0.35499733688813034,
  },
  sad: {
    mouthFrownLeft: 1,
    mouthFrownRight: 1,
    mouthShrugLower: 0.78341,
    browInnerUp: 0.452,
    eyeSquintLeft: 0.72,
    eyeSquintRight: 0.75,
    eyeLookDownLeft: 0.5,
    eyeLookDownRight: 0.5,
    jawForward: 1,
  },
  surprised: {
    eyeWideLeft: 0.5,
    eyeWideRight: 0.5,
    jawOpen: 0.351,
    mouthFunnel: 1,
    browInnerUp: 1,
  },
  angry: {
    browDownLeft: 1,
    browDownRight: 1,
    eyeSquintLeft: 1,
    eyeSquintRight: 1,
    jawForward: 1,
    jawLeft: 1,
    mouthShrugLower: 1,
    noseSneerLeft: 1,
    noseSneerRight: 0.42,
    eyeLookDownLeft: 0.16,
    eyeLookDownRight: 0.16,
    cheekSquintLeft: 1,
    cheekSquintRight: 1,
    mouthClose: 0.23,
    mouthFunnel: 0.63,
    mouthDimpleRight: 1,
  },
  crazy: {
    browInnerUp: 0.9,
    jawForward: 1,
    noseSneerLeft: 0.5700000000000001,
    noseSneerRight: 0.51,
    eyeLookDownLeft: 0.39435766259644545,
    eyeLookUpRight: 0.4039761421719682,
    eyeLookInLeft: 0.9618479575523053,
    eyeLookInRight: 0.9618479575523053,
    jawOpen: 0.9618479575523053,
    mouthDimpleLeft: 0.9618479575523053,
    mouthDimpleRight: 0.9618479575523053,
    mouthStretchLeft: 0.27893590769016857,
    mouthStretchRight: 0.2885543872656917,
    mouthSmileLeft: 0.5578718153803371,
    mouthSmileRight: 0.38473918302092225,
    tongueOut: 0.9618479575523053,
  },
};

const corresponding = {
  A: "viseme_PP",
  B: "viseme_kk",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
};

let setupMode = false;

export function Model(props) {
  const { nodes, materials, scene } = useGLTF("/models/model.glb");
  const { message, onMessagePlayed, chat, userId, hasInteracted } = useChat();
  const [lipsync, setLipsync] = useState();
  const audioRef = useRef(new Audio()); // Persistent Audio instance

  useEffect(() => {
    console.log(message);
    if (!message) {
      setAnimation("Idle");
      return;
    }

    setAnimation(message.animation || "Idle");
    setFacialExpression(message.facialExpression || "");
    setLipsync(message.lipsync);

     // Prepare and play audio if available
  if (message.audio) {
    const audioBlob = new Blob(
      [Uint8Array.from(atob(message.audio), (c) => c.charCodeAt(0))],
      { type: "audio/mp3" }
    );
    const audioURL = URL.createObjectURL(audioBlob);

    const audio = audioRef.current;
    audio.src = audioURL;
    audio.onended = onMessagePlayed;

    // Attempt to play immediately, handling user interaction
    const playAudio = async () => {
      try {
        if (hasInteracted || localStorage.getItem("audioUnlocked")) {
          // If the user has interacted or the audio is unlocked, play the audio
          await audio.play();
          localStorage.setItem("audioUnlocked", "true"); // Save unlock state
        } else {
          console.warn("Autoplay blocked, waiting for user interaction");

          // Only listen for clicks if autoplay is blocked (for mobile devices)
          const unlockAutoplay = () => {
            audio.play().catch(err => console.error("Playback error:", err));
            localStorage.setItem("audioUnlocked", "true"); // Unlock audio
            window.removeEventListener("click", unlockAutoplay);
          };
          // Add a listener for a click event to unlock autoplay
          window.addEventListener("click", unlockAutoplay, { once: true });
        }
      } catch (e) {
        console.warn("Error attempting to play audio", e);
      }
    };

    // Call the playAudio function to attempt audio playback
    playAudio();
  }
}, [message, onMessagePlayed, hasInteracted]); 

  const { animations } = useGLTF("/models/animations.glb");
  const group = useRef();
  const { actions, mixer } = useAnimations(animations, group);
  const [animation, setAnimation] = useState(
    animations.find((a) => a.name === "Idle") ? "Idle" : animations[0].name
  );

  useEffect(() => {
    if (actions[animation]) {
      actions[animation]
        .reset()
        .fadeIn(mixer?.stats?.actions?.inUse === 0 ? 0 : 0.5)
        .play();
    }

    return () => {
      if (actions[animation]) {
        actions[animation].fadeOut(0.5);
      }
    };
  }, [animation, actions, mixer]);

  // Morph Target logic for facial expressions
  const lerpMorphTarget = (target, value, speed = 0.1) => {
    scene.traverse((child) => {
      if (child.isSkinnedMesh && child.morphTargetDictionary) {
        const index = child.morphTargetDictionary[target];
        if (
          index === undefined ||
          child.morphTargetInfluences[index] === undefined
        ) {
          return;
        }
        child.morphTargetInfluences[index] = THREE.MathUtils.lerp(
          child.morphTargetInfluences[index],
          value,
          speed
        );

        if (!setupMode) {
          try {
            set({
              [target]: value,
            });
          } catch (e) {}
        }
      }
    });
  };

  const [blink, setBlink] = useState(false);
  const [winkLeft, setWinkLeft] = useState(false);
  const [winkRight, setWinkRight] = useState(false);
  const [facialExpression, setFacialExpression] = useState("");
  const [audio, setAudio] = useState();

  useFrame(() => {
    const appliedMorphTargets = []; // Define the array here

    if (!setupMode) {
      Object.keys(nodes.EyeLeft.morphTargetDictionary).forEach((key) => {
        const mapping = facialExpressions[facialExpression];
        if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") {
          return; // Skip eye blink targets
        }
        if (mapping && mapping[key]) {
          lerpMorphTarget(key, mapping[key], 0.1);
        } else {
          lerpMorphTarget(key, 0, 0.1);
        }
      });

      // Handle eye blink separately
      lerpMorphTarget("eyeBlinkLeft", blink || winkLeft ? 1 : 0, 0.5);
      lerpMorphTarget("eyeBlinkRight", blink || winkRight ? 1 : 0, 0.5);

      // LIPSYNC logic
      if (!setupMode && message && lipsync && audioRef.current) {
        const audio = audioRef.current;
        const currentAudioTime = audio.currentTime;

        if (currentAudioTime !== undefined) {
          for (let i = 0; i < lipsync.mouthCues.length; i++) {
            const mouthCue = lipsync.mouthCues[i];
            if (
              currentAudioTime >= mouthCue.start &&
              currentAudioTime <= mouthCue.end
            ) {
              appliedMorphTargets.push(corresponding[mouthCue.value]); // Add the morph target to the list
              lerpMorphTarget(corresponding[mouthCue.value], 1, 0.2); // Apply morph target
              break;
            }
          }
        }
      }

      // Reset other morph targets if not in the appliedMorphTargets list
      Object.values(corresponding).forEach((value) => {
        if (!appliedMorphTargets.includes(value)) {
          lerpMorphTarget(value, 0, 0.1); // Reset morph target
        }
      });
    }
  });

 
  

  useControls("FacialExpressions", {
    chat: button(() => chat()),
    winkLeft: button(() => {
      setWinkLeft(true);
      setTimeout(() => setWinkLeft(false), 300);
    }),
    winkRight: button(() => {
      setWinkRight(true);
      setTimeout(() => setWinkRight(false), 300);
    }),
    animation: {
      value: animation,
      options: animations.map((a) => a.name),
      onChange: (value) => setAnimation(value),
    },
    facialExpression: {
      options: Object.keys(facialExpressions),
      onChange: (value) => setFacialExpression(value),
    },
    enableSetupMode: button(() => {
      setupMode = true;
    }),
    disableSetupMode: button(() => {
      setupMode = false;
    }),
    logMorphTargetValues: button(() => {
      const emotionValues = {};
      Object.keys(nodes.EyeLeft.morphTargetDictionary).forEach((key) => {
        if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") {
          return; // eyes wink/blink are handled separately
        }
        const value =
          nodes.EyeLeft.morphTargetInfluences[
            nodes.EyeLeft.morphTargetDictionary[key]
          ];
        if (value > 0.01) {
          emotionValues[key] = value;
        }
      });
      console.log(JSON.stringify(emotionValues, null, 2));
    }),
  });

  const [, set] = useControls("MorphTarget", () =>
    Object.assign(
      {},
      ...Object.keys(nodes.EyeLeft.morphTargetDictionary).map((key) => {
        return {
          [key]: {
            label: key,
            value: 0,
            min: nodes.EyeLeft.morphTargetInfluences[
              nodes.EyeLeft.morphTargetDictionary[key]
            ],
            max: 1,
            onChange: (val) => {
              if (setupMode) {
                lerpMorphTarget(key, val, 1);
              }
            },
          },
        };
      })
    )
  );

  useEffect(() => {
    let blinkTimeout;
    const nextBlink = () => {
      blinkTimeout = setTimeout(() => {
        setBlink(true);
        setTimeout(() => {
          setBlink(false);
          nextBlink();
        }, 200);
      }, THREE.MathUtils.randInt(1000, 5000));
    };
    nextBlink();
    return () => clearTimeout(blinkTimeout);
  }, []);

  return (
    <group {...props} ref={group} dispose={null}>
      <primitive object={nodes.Hips} />
      <skinnedMesh 
      name="Wolf3D_Hair"
      geometry={nodes.Wolf3D_Hair.geometry} 
      material={materials.Wolf3D_Hair} 
      skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh 
      name="Wolf3D_Glasses"
      geometry={nodes.Wolf3D_Glasses.geometry} 
      material={materials.Wolf3D_Glasses} 
      skeleton={nodes.Wolf3D_Glasses.skeleton} 
      />
      <skinnedMesh 
      name="Wolf3D_Body"
      geometry={nodes.Wolf3D_Body.geometry} 
      material={materials.Wolf3D_Body} 
      skeleton={nodes.Wolf3D_Body.skeleton} 
      />
      <skinnedMesh 
      name="Wolf3D_Outfit_Bottom"
      geometry={nodes.Wolf3D_Outfit_Bottom.geometry} 
      material={materials.Wolf3D_Outfit_Bottom} 
      skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} 
      />
      <skinnedMesh 
      name="Wolf3D_Outfit_Footwear"
      geometry={nodes.Wolf3D_Outfit_Footwear.geometry} 
      material={materials.Wolf3D_Outfit_Footwear} 
      skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} 
      />
      <skinnedMesh 
      name="Wolf3D_Outfit_Top"
      geometry={nodes.Wolf3D_Outfit_Top.geometry} 
      material={materials.Wolf3D_Outfit_Top} 
      skeleton={nodes.Wolf3D_Outfit_Top.skeleton} 
      />
      <skinnedMesh name="EyeLeft" 
      geometry={nodes.EyeLeft.geometry} 
      material={materials.Wolf3D_Eye} 
      skeleton={nodes.EyeLeft.skeleton} 
      morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} 
      morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} 
      />
      <skinnedMesh name="EyeRight" 
      geometry={nodes.EyeRight.geometry} 
      material={materials.Wolf3D_Eye} 
      skeleton={nodes.EyeRight.skeleton} 
      morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} 
      morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} 
      />
      <skinnedMesh name="Wolf3D_Head" 
      geometry={nodes.Wolf3D_Head.geometry} 
      material={materials.Wolf3D_Skin} 
      skeleton={nodes.Wolf3D_Head.skeleton} 
      morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
     morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} 
     />
      <skinnedMesh name="Wolf3D_Teeth" 
      geometry={nodes.Wolf3D_Teeth.geometry} 
      material={materials.Wolf3D_Teeth} 
      skeleton={nodes.Wolf3D_Teeth.skeleton} 
      morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} 
      morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} 
      />
    </group>
  )
}

useGLTF.preload('/models/model.glb')
useGLTF.preload("/models/animations.glb");